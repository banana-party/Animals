1. Не понятен смысл интерфейса IMakeSoundable, если у Вас все животные и так реализуют метод MakeASound, тогда можно сделать, чтобы интерфейс IAnimal реализовывал IMakeSoundable
2. Свойства можно перенести из AnimalBase в IAnimal
3. Метод Care у HomeAnimalBase никогда не вызывается
4. Метод Fly у BirdBase не вызывается никогда
5. Метод MakeASound можно было реализовать прямо в базовом классе и намного лучше(очень много полностью одинаковых перегрузок)
6. Лишний конвертер AnimalToSoundPathConverter
7. Класс Const нужно было сделать статическим и константы внутри него тоже статическими
8. Реализовать добавление животного в зоопарк в WPF
9. Необходимо реализовать редактирование животных в WPF
10. В MainWindowViewModel лучше использовать ObservableCollection вместо List
11. Необходимо сделать сервис навигации в WPF напрямую во ViewModelях создавать элементы View плохая идея
12. В MainWindowViewModel не используется команда PlaySoundCommand нигде
13. В WPF необходимо реализовать NotificationService
14. Исключение при попытке редактирования животного в WPF
15. Не используется play-button.png
16. FileReader использует два подхода одновременно и написан достаточно странно, то есть либо один раз открываем поток и храним его в виде приватного поля и при вызывах методов только им пользуемся и в конце закрываем, либо открываем и закрываем при каждом чтении из файла
17. То же самое что и в прошлом пункте про StreamWriter
18. Лишний метод в классе Zoo
19. Считывание int и float с клавиатуры с проверкой на корректность можно было вынести в отдельный Extension или сервис
20. Необходимо подумать над использованием Tuple с большим количеством параметров, выглядит не очень ООПшно
21. Необходимо реализовать ConsoleDialogService куда вынести всю логику опроса пользователя Да/нет
22. Лучше использовать DateTime.Parse или DateTime.TryParse для считывания даты
23. Лучше вынести в отдельные сервисы или Extensionы методы считывания даты, булей, интов и.т.д
24. Лучше сделать отдельный фабричный метод на процесс разбора типа животных в AnimalCreator
25. Можно было сделать базовый класс для ConsoleCreattorов домашних животных, так как у них содержится ввод одинаковых полей и в итоге получается дублирование кода
26. Избавиться от дублирования кода в ConsoleCreatorах птиц и домашних животных, так как получений Tuple и получение из неё аргументов
27. В парсерах необходимо сделать проверки на количество параметров, а так же что пришло не null и не пусто
28. Можно сделать базовый класс Парсера для избежания дублирования кода конструкторов
29. При сохранении животных в файл необходимо спрашивать путь к файлу
30. Программа падает при повторном сохранении в файл
31. Приходится по несколько раз нажимать на Enter после выполнения команды, чтобы выполнять следующую
32. Сообщений об успешном или неуспешном исполнении команды по-прежнему нет
33. Можно было сделать отдельный консольный сервис вывода информации о животном, чтобы избежать дублирования кода в сервисах печати информации о животных